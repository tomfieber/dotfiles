autoload -Uz colors && colors

# Helper function to validate IP addresses
validate_ip() {
    local ip=$1
    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        return 0
    fi
    return 1
}

# Helper function to validate port numbers
validate_port() {
    local port=$1
    if [[ $port =~ ^[0-9]+$ ]] && [[ $port -ge 1 ]] && [[ $port -le 65535 ]]; then
        return 0
    fi
    return 1
}

function ligolo-setup() {
    # Get VPN interface and IP with better error handling
    local interface
    interface="$(ip tuntap show 2>/dev/null | grep -v ligolo | cut -d : -f1 | head -n 1)"
    
    if [[ -z "$interface" ]]; then
        echo "❌ Error: No VPN interface found. Are you connected to a VPN?" >&2
        return 1
    fi
    
    local ip
    ip="$(ip a s "${interface}" 2>/dev/null | grep -o -P '(?<=inet )[0-9]{1,3}(\.[0-9]{1,3}){3}' | head -n 1)"
    
    if [[ -z "$ip" ]]; then
        echo "❌ Error: Could not determine IP address for interface ${interface}" >&2
        return 1
    fi
    
    # Get user input with validation
    echo "Name of the user to add (Enter for current user): "
    read NAME
    local final_name=${NAME:-$USER}
    
    # Validate username
    if [[ ! "$final_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        echo "❌ Error: Invalid username. Use only alphanumeric characters, hyphens, and underscores." >&2
        return 1
    fi
    
    echo "Port to listen on (Enter for default port 11601): "
    read PORT
    local final_port=${PORT:-11601}
    
    # Validate port
    if ! validate_port "$final_port"; then
        echo "❌ Error: Invalid port number. Must be between 1-65535." >&2
        return 1
    fi
    
    # Check if ligolo interface already exists
    if ip link show ligolo >/dev/null 2>&1; then
        echo "⚠️  Warning: ligolo interface already exists. Removing first..."
        sudo ip link delete ligolo 2>/dev/null
    fi
    
    # Create tunnel interface - removed eval for security
    echo "🔧 Creating ligolo tunnel interface..."
    if ! sudo ip tuntap add user "$final_name" mode tun ligolo; then
        echo "❌ Error: Failed to create ligolo interface" >&2
        return 1
    fi
    
    if ! sudo ip link set ligolo up; then
        echo "❌ Error: Failed to bring up ligolo interface" >&2
        return 1
    fi
    
    # Check if ligolo-ng proxy exists
    local proxy_path="/opt/tools/ligolo-ng/proxy"
    if [[ ! -x "$proxy_path" ]]; then
        echo "❌ Error: ligolo-ng proxy not found at $proxy_path" >&2
        echo "   Please install ligolo-ng first" >&2
        return 1
    fi
    
    echo
    print -- $fg_bold[green]✅ Ligolo interface created successfully!$reset_color
    print -- $fg_bold[green]📡 Use the following commands to connect back to the server:$reset_color
    echo
    echo "==Windows=="
    echo "Start-Process -FilePath 'C:\\Windows\\Tasks\\agent.exe' -ArgumentList '-connect','${ip}:${final_port}','-ignore-cert'"
    echo
    echo "==Linux=="
    echo "nohup ./agent -connect ${ip}:${final_port} -ignore-cert &"
    echo
    echo "🚀 Starting ligolo-ng proxy on ${ip}:${final_port}..."
    
    # Start proxy - removed eval for security
    "$proxy_path" -laddr "0.0.0.0:${final_port}" -selfcert
}

function add-ligolo-route() {
    echo "Enter the range to add (e.g., 192.168.1.0/24): "
    read range
    
    # Validate CIDR notation
    if [[ ! "$range" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then
        echo "❌ Error: Invalid CIDR notation. Example: 192.168.1.0/24" >&2
        return 1
    fi
    
    # Check if ligolo interface exists
    if ! ip link show ligolo >/dev/null 2>&1; then
        echo "❌ Error: ligolo interface not found. Run ligolo-setup first." >&2
        return 1
    fi
    
    # Add route with error checking
    if sudo ip route add "$range" dev ligolo; then
        echo "✅ Route added successfully: $range via ligolo"
        echo "📋 Current ligolo routes:"
        ip route show dev ligolo 2>/dev/null || echo "No routes found"
    else
        echo "❌ Error: Failed to add route $range" >&2
        return 1
    fi
}

function createdir() {
    # Define note templates array for easier maintenance
    local note_files=(
        "1. Administrative Information.md"
        "2. Scoping Information.md"
        "3. Activity Log.md"
        "4. Payload Log.md"
        "5. OSINT Data.md"
        "6. Credentials.md"
        "7. Web Application Research.md"
        "8. Vulnerability Scan Research.md"
        "9. Service Enumeration Research.md"
        "10. AD Enumeration Research.md"
        "11. Attack Path.md"
        "12. Findings.md"
    )
    
    echo "Enter a name for the directory: "
    read NAME
    local dirname=${NAME:-newdir}
    
    # Validate directory name
    if [[ ! "$dirname" =~ ^[a-zA-Z0-9_.-]+$ ]]; then
        echo "❌ Error: Invalid directory name. Use only alphanumeric characters, dots, hyphens, and underscores." >&2
        return 1
    fi
    
    # Check if directory already exists
    if [[ -d "$dirname" ]]; then
        echo "⚠️  Warning: Directory '$dirname' already exists."
        echo "Do you want to continue and potentially overwrite files? (y/N): "
        read confirmation
        if [[ ! "$confirmation" =~ ^[Yy]$ ]]; then
            echo "Operation cancelled."
            return 0
        fi
    fi
    
    echo "Enter an IP if there is one (useful for labs): "
    read IP
    local final_ip=${IP:-""}
    
    # Validate IP if provided
    if [[ -n "$final_ip" ]] && ! validate_ip "$final_ip"; then
        echo "❌ Error: Invalid IP address format" >&2
        return 1
    fi
    
    echo "Enter a HOST IP (e.g., a tun0 VPN IP): "
    read LHOST
    local final_lhost=${LHOST:-""}
    
    # Validate LHOST if provided
    if [[ -n "$final_lhost" ]] && ! validate_ip "$final_lhost"; then
        echo "❌ Error: Invalid HOST IP address format" >&2
        return 1
    fi
    
    # Create directory structure
    echo "📁 Creating directory structure..."
    if ! mkdir -p "$dirname"; then
        echo "❌ Error: Failed to create directory '$dirname'" >&2
        return 1
    fi
    
    cd "$dirname" || {
        echo "❌ Error: Failed to change to directory '$dirname'" >&2
        return 1
    }
    
    # Create subdirectories with error handling
    if ! mkdir -p {Admin,Deliverables,Evidence/{Findings,"Logging output","Misc files",Notes,OSINT,Scans/{"AD Enumeration",Service,Vuln,Web},Wireless},Retest}; then
        echo "❌ Error: Failed to create subdirectories" >&2
        return 1
    fi
    
    # Create note files with headers
    echo "📝 Creating note files..."
    local failed_files=()
    for note_file in "${note_files[@]}"; do
        local header="# ${note_file%.md}"
        if ! echo "$header" > "Evidence/Notes/$note_file"; then
            failed_files+=("$note_file")
        fi
    done
    
    if [[ ${#failed_files[@]} -gt 0 ]]; then
        echo "⚠️  Warning: Failed to create some note files: ${failed_files[*]}" >&2
    fi
    
    # Create .envrc file with proper escaping
    echo "🔧 Creating environment file..."
    {
        echo "export name='$dirname'"
        [[ -n "$final_ip" ]] && echo "export ip='$final_ip'"
        [[ -n "$final_lhost" ]] && echo "export lhost='$final_lhost'"
    } > .envrc
    
    # Check if direnv is available
    if command -v direnv >/dev/null 2>&1; then
        if direnv allow; then
            echo "✅ Environment variables configured with direnv"
        else
            echo "⚠️  Warning: Failed to configure direnv" >&2
        fi
    else
        echo "💡 Tip: Install direnv to automatically load environment variables"
        echo "   For now, you can source the .envrc file manually: source .envrc"
    fi
    
    echo
    echo "✅ Project directory '$dirname' created successfully!"
    echo "📍 Current location: $(pwd)"
    echo "🌐 Target IP: ${final_ip:-"Not set"}"
    echo "🏠 Host IP: ${final_lhost:-"Not set"}"
}

function genadname() {
    # Validate input
    if [[ -z "$1" ]]; then
        echo "❌ Usage: genadname \"First Last\"" >&2
        echo "   Example: genadname \"John Doe\"" >&2
        return 1
    fi
    
    # Process each line of input (supports multiple names)
    echo "$1" | while IFS= read -r line; do
        # Skip empty lines
        [[ -z "$line" ]] && continue
        
        # Parse names with better handling of edge cases
        local firstname lastname
        firstname=$(echo "$line" | awk '{print $1}' | tr '[:upper:]' '[:lower:]')
        lastname=$(echo "$line" | awk '{print $2}' | tr '[:upper:]' '[:lower:]')
        
        # Validate that we have both first and last names
        if [[ -z "$firstname" || -z "$lastname" ]]; then
            echo "⚠️  Warning: Skipping invalid name format: '$line'" >&2
            continue
        fi
        
        # Generate variations more efficiently using printf
        local first_initial="${firstname:0:1}"
        local last_initial="${lastname:0:1}"
        local first_three="${firstname:0:3}"
        local last_three="${lastname:0:3}"
        
        # Output all variations with comments for clarity
        cat << EOF
${firstname}${lastname}
${lastname}${firstname}
${firstname}.${lastname}
${lastname}.${firstname}
${lastname}${first_initial}
${firstname}${last_initial}
${first_initial}.${lastname}
${first_three}${last_three}
${first_three}.${last_three}
${first_initial}${lastname}
${lastname}.${first_initial}
${last_three}_${first_three}
${first_three}_${last_three}
${firstname}
${lastname}
${last_initial}.${firstname}
${last_initial}${firstname}
EOF
    done
}

function get_vpn_ip() {
    # Find VPN interface with better error handling
    local interface
    interface="$(ip tuntap show 2>/dev/null | grep -v ligolo | cut -d : -f1 | head -n 1)"
    
    # Fallback to common VPN interface names if tuntap doesn't work
    if [[ -z "$interface" ]]; then
        local common_vpn_interfaces=("tun0" "tun1" "utun0" "utun1" "wg0")
        for iface in "${common_vpn_interfaces[@]}"; do
            if ip link show "$iface" >/dev/null 2>&1; then
                interface="$iface"
                break
            fi
        done
    fi
    
    # If still no interface found, return silently
    [[ -z "$interface" ]] && return 0
    
    # Get IP address with better regex
    local ip
    ip="$(ip a s "${interface}" 2>/dev/null | grep -oP 'inet \K[0-9]{1,3}(\.[0-9]{1,3}){3}' | head -n 1)"
    
    # Only display if we have a valid IP
    if [[ -n "$ip" ]] && validate_ip "$ip"; then
        print -P "%F{%(#.blue.red)}[%B%F{yellow}$ip%b%F{%(#.blue.red)}]─"
    fi
}

function start-bloodhound() {
    local compose_file="/opt/tools/BloodHound/examples/docker-compose/docker-compose.yml"
    
    # Check if docker-compose file exists
    if [[ ! -f "$compose_file" ]]; then
        echo "❌ Error: BloodHound docker-compose file not found at $compose_file" >&2
        echo "   Please install BloodHound or update the path" >&2
        return 1
    fi
    
    # Check if Docker is running
    if ! docker info >/dev/null 2>&1; then
        echo "❌ Error: Docker is not running or not accessible" >&2
        echo "   Please start Docker and ensure you have proper permissions" >&2
        return 1
    fi
    
    # Check if docker-compose is available
    if ! command -v docker-compose >/dev/null 2>&1; then
        echo "❌ Error: docker-compose not found" >&2
        echo "   Please install docker-compose" >&2
        return 1
    fi
    
    echo "🩸 Starting BloodHound..."
    echo "📁 Using compose file: $compose_file"
    
    # Start BloodHound with better error handling
    if docker-compose -f "$compose_file" up; then
        echo "✅ BloodHound started successfully"
    else
        echo "❌ Error: Failed to start BloodHound" >&2
        return 1
    fi
}

function link-impacket() {
    # Find pipx installation dynamically instead of hardcoded path
    local pipx_base
    if command -v pipx >/dev/null 2>&1; then
        pipx_base="$(pipx environment --value PIPX_LOCAL_VENVS 2>/dev/null)"
    fi
    
    # Fallback to common locations
    if [[ -z "$pipx_base" ]]; then
        local possible_paths=(
            "$HOME/.local/share/pipx/venvs"
            "/home/$USER/.local/share/pipx/venvs"
        )
        
        for path in "${possible_paths[@]}"; do
            if [[ -d "$path/impacket" ]]; then
                pipx_base="$path"
                break
            fi
        done
    fi
    
    local impacket_bin="$pipx_base/impacket/bin"
    
    # Validate impacket installation
    if [[ ! -d "$impacket_bin" ]]; then
        echo "❌ Error: Impacket installation not found" >&2
        echo "   Expected location: $impacket_bin" >&2
        echo "   Please install impacket using: pipx install impacket" >&2
        return 1
    fi
    
    echo "🔗 Linking Impacket tools from: $impacket_bin"
    
    # Create symlinks with better error handling
    local linked_count=0
    local failed_links=()
    
    for script in "$impacket_bin"/*.py; do
        [[ ! -f "$script" ]] && continue
        
        local script_name
        script_name="$(basename "$script")"
        local target_link="/usr/local/bin/$script_name"
        
        # Check if link already exists and points to correct location
        if [[ -L "$target_link" ]]; then
            local current_target
            current_target="$(readlink "$target_link")"
            if [[ "$current_target" == "$script" ]]; then
                echo "✓ $script_name (already linked correctly)"
                ((linked_count++))
                continue
            else
                echo "⚠️  Updating existing link for $script_name"
                sudo rm "$target_link"
            fi
        elif [[ -f "$target_link" ]]; then
            echo "⚠️  Warning: $target_link exists but is not a symlink. Skipping."
            failed_links+=("$script_name (file exists)")
            continue
        fi
        
        # Create symlink
        if sudo ln -s "$script" "$target_link" 2>/dev/null; then
            echo "✓ Linked $script_name"
            ((linked_count++))
        else
            echo "❌ Failed to link $script_name"
            failed_links+=("$script_name")
        fi
    done
    
    echo
    echo "📊 Summary:"
    echo "   ✅ Successfully linked: $linked_count tools"
    
    if [[ ${#failed_links[@]} -gt 0 ]]; then
        echo "   ❌ Failed to link: ${#failed_links[@]} tools"
        echo "      ${failed_links[*]}"
        return 1
    fi
    
    echo "🎉 All Impacket tools linked successfully!"
}

function add_host() {
    echo "Enter the IP address: "
    read IP
    echo "Enter the hostname: "
    read HOSTNAME
    
    # Validate IP address
    if [[ -z "$IP" ]] || ! validate_ip "$IP"; then
        echo "❌ Error: Invalid or empty IP address" >&2
        return 1
    fi
    
    # Validate hostname
    if [[ -z "$HOSTNAME" ]]; then
        echo "❌ Error: Hostname cannot be empty" >&2
        return 1
    fi
    
    # Basic hostname validation (allows alphanumeric, dots, hyphens)
    if [[ ! "$HOSTNAME" =~ ^[a-zA-Z0-9.-]+$ ]]; then
        echo "❌ Error: Invalid hostname format" >&2
        return 1
    fi
    
    # Check if entry already exists
    if grep -q "^$IP[[:space:]]" /etc/hosts; then
        echo "⚠️  Warning: IP $IP already exists in /etc/hosts"
        grep "^$IP[[:space:]]" /etc/hosts
        echo "Do you want to continue? (y/N): "
        read confirmation
        if [[ ! "$confirmation" =~ ^[Yy]$ ]]; then
            echo "Operation cancelled."
            return 0
        fi
    fi
    
    if grep -q "[[:space:]]$HOSTNAME[[:space:]]*$" /etc/hosts; then
        echo "⚠️  Warning: Hostname $HOSTNAME already exists in /etc/hosts"
        grep "[[:space:]]$HOSTNAME[[:space:]]*$" /etc/hosts
        echo "Do you want to continue? (y/N): "
        read confirmation
        if [[ ! "$confirmation" =~ ^[Yy]$ ]]; then
            echo "Operation cancelled."
            return 0
        fi
    fi
    
    # Add entry to /etc/hosts
    local hosts_entry="$IP	$HOSTNAME"
    
    if echo "$hosts_entry" | sudo tee -a /etc/hosts >/dev/null; then
        echo "✅ Successfully added to /etc/hosts:"
        echo "   $hosts_entry"
        
        # Test the resolution
        if ping -c 1 -W 1 "$HOSTNAME" >/dev/null 2>&1; then
            echo "🎉 Hostname resolution test successful!"
        else
            echo "⚠️  Note: Hostname added but ping test failed (this may be normal if host is down)"
        fi
    else
        echo "❌ Error: Failed to add entry to /etc/hosts" >&2
        return 1
    fi
}

function get_ports() {
    local machine_name="$1"
    
    # Validate input
    if [[ -z "$machine_name" ]]; then
        echo "❌ Usage: get_ports <machine_name>" >&2
        echo "   Example: get_ports target" >&2
        return 1
    fi
    
    local gnmap_file="${machine_name}.gnmap"
    
    # Check if file exists
    if [[ ! -f "$gnmap_file" ]]; then
        echo "❌ Error: File '$gnmap_file' not found" >&2
        echo "   Make sure you have run nmap with -oG option" >&2
        return 1
    fi
    
    # Check if file has port information
    if ! grep -q "Ports:" "$gnmap_file"; then
        echo "❌ Error: No port information found in '$gnmap_file'" >&2
        echo "   This file may not be a valid nmap gnmap output" >&2
        return 1
    fi
    
    echo "🔍 Extracting ports from: $gnmap_file"
    echo
    
    # Extract and format ports more reliably
    grep "Ports:" "$gnmap_file" | \
    awk -F 'Ports: ' '{print $2}' | \
    awk -F '\t' '{print $1}' | \
    tr ',' '\n' | \
    sed 's|//|/|g' | \
    sed 's|/$||g' | \
    sed 's|^[[:space:]]*||g' | \
    sed 's|[[:space:]]*$||g' | \
    grep -v '^$' | \
    sort -n
    
    # Show summary
    local port_count
    port_count=$(grep "Ports:" "$gnmap_file" | \
                awk -F 'Ports: ' '{print $2}' | \
                awk -F '\t' '{print $1}' | \
                tr ',' '\n' | \
                grep -c '/')
    
    echo
    echo "📊 Found $port_count ports total"
}
