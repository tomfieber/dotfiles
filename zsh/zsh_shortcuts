autoload -Uz colors && colors

autoload -Uz colors && colors

# Function to check a domain against the Dehashed API for breached credentials.
dehashed_check() {

    # 1. Check if a domain was provided as an argument.
    if [[ -z "$1" ]]; then
        echo "Usage: dehashed_check <domain.com>" >&2
        echo "Example: dehashed_check example.com" >&2
        return 1
    fi

    # 2. Check if jq is installed.
    if ! command -v jq &> /dev/null; then
        echo "Error: 'jq' is not installed. Please install it to parse the JSON response." >&2
        echo "On Debian/Ubuntu: sudo apt-get install jq" >&2
        echo "On macOS (Homebrew): brew install jq" >&2
        return 1
    fi

    local domain="$1"
    echo "üîç Searching for breached credentials for domain: $domain"
    echo "---------------------------------------------------"

    # 3. Make the API call using curl and authenticate with your credentials.
    # The output is piped to jq for pretty-printing the relevant fields.
    curl -s -u "$DEHASHED_EMAIL:$DEHASHED_API_KEY" \
         -H "Accept: application/json" \
         "https://api.dehashed.com/search?query=domain:\"$domain\"" | \
         jq '.entries[] | {email: .email, username: .username, password: .password, source: .obtained_from}'
    
    echo "---------------------------------------------------"
    echo "‚úÖ Search complete."
}

crtsh() {
    # Check if a domain argument is provided
    if [[ -z "$1" ]]; then
        echo "Usage: crtsh <domain>" >&2
        return 1
    fi

    # Check crt.sh
    curl -s "https://crt.sh/?q=%.${1}&output=json" | \
      jq -r '.[].name_value' | \
      sed 's/^\*\.//' | \
      sort -u
}
